trigger:
- main

variables:
  BUILD_DIR: 'build'
  IPA_PATH: '$(BUILD_DIR)/ipa/App.ipa'
  TEAM_ID: '22X77ENQ2H'
  PROVISIONING_PROFILE_NAME: 'AppSealing Wildcard Distribution Profile'


pool:
  name: APPSEALING

steps:
- script: |
    # Define paths for provisioning profile and keychain setup
    P12_CERT_PATH="$(Build.SourcesDirectory)/ios/App/distribution.p12"
    PROVISIONING_PROFILE_PATH="$(Build.SourcesDirectory)/ios/App/profile.mobileprovision"
    KEYCHAIN_PATH="$HOME/Library/Keychains/temp-keychain.keychain-db"
    KEYCHAIN_PASSWORD="temp123"

    # Create a temporary keychain for code signing
    if security list-keychains | grep -q "temp-keychain.keychain-db"; then
        echo "Deleting existing temporary keychain..."
        security delete-keychain "$KEYCHAIN_PATH"
    fi

    echo "Creating temporary keychain..."
    security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

    echo "Setting temporary keychain as default..."
    security list-keychains -d user -s "$KEYCHAIN_PATH"
    security default-keychain -s "$KEYCHAIN_PATH"
    security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
    security set-keychain-settings -lut 3600 "$KEYCHAIN_PATH"

    echo "Importing distribution certificate (PKCS#12) into temporary keychain..."
    security import "$P12_CERT_PATH" -k "$KEYCHAIN_PATH" -P "123456" -T /usr/bin/codesign
    security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
  displayName: 'Setup Temporary Keychain and Install Certificate'

- task: UseNode@1
  inputs:
    version: '20.x'
  displayName: 'Install Node.js 20'

- script: |
    export PATH="$PATH:/usr/local/bin"
    echo "Node.js: $(node -v)"
    echo "npm: $(npm -v)"
  displayName: 'Verify Node.js'

# 1. 의존성 설치 및 프로젝트 설정
- script: |
    npm install -g @ionic/cli
    npm ci
    npx cap sync ios
    npm run build
    npx cap sync ios
  displayName: '의존성 설치 및 프로젝트 설정'

# 2. 번들 ID 및 프로비저닝 정보 추출
- script: |
    BUNDLE_ID=$(grep PRODUCT_BUNDLE_IDENTIFIER ios/App/App.xcodeproj/project.pbxproj | head -1 | sed 's/.*= \(.*\);/\1/')
    # PROVISION_NAME=$(security cms -D -i ios/App/profile.mobileprovision | grep -aA1 Name | grep -v Name | sed -e 's/.*<string>\(.*\)<\/string>.*/\1/')
    # TEAM_ID=$(security cms -D -i ios/App/profile.mobileprovision | grep -a1 TeamIdentifier | tail -n1 | sed -e 's/.*<string>\(.*\)<\/string>.*/\1/')
    # cp ios/App/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles

    # 프로파일 UUID 추출
    PROFILE_UUID=$(security cms -D -i ios/App/profile.mobileprovision | grep -aA1 UUID | grep -v UUID | sed -e 's/.*<string>\(.*\)<\/string>.*/\1/')

    # 양쪽 경로에 동시 복사 (과도기적 대응)
    mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
    mkdir -p ~/Library/Developer/Xcode/UserData/Provisioning\ Profiles

    cp ios/App/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/${PROFILE_UUID}.mobileprovision
    cp ios/App/profile.mobileprovision ~/Library/Developer/Xcode/UserData/Provisioning\ Profiles/${PROFILE_UUID}.mobileprovision
    
    echo "##vso[task.setvariable variable=BUNDLE_ID]$BUNDLE_ID"
    echo "##vso[task.setvariable variable=PROVISION_NAME]$PROVISION_NAME"
    echo "##vso[task.setvariable variable=TEAM_ID]$TEAM_ID"
  displayName: '번들 ID 및 프로비저닝 정보 추출'

# 3. ExportOptions.plist 생성
- script: |
    cat <<EOF > ExportOptions.plist
    <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
    <plist version="1.0">
      <dict>
        <key>method</key>
        <string>app-store-connect</string>
        <key>provisioningProfiles</key>
        <dict>
            <key>${BUNDLE_ID}</key>
            <string>$(PROVISIONING_PROFILE_NAME)</string>
        </dict>
        <key>signingCertificate</key>
        <string>Apple Distribution</string>
        <key>signingStyle</key>
        <string>manual</string>
        <key>teamID</key>
        <string>$(TEAM_ID)</string>
      </dict>
    </plist>
    EOF
    cat "ExportOptions.plist"
  displayName: 'ExportOptions.plist 생성'

# Pod 설치 전 설정
- script: |
    cd ios/App
    pod deintegrate
    rm -rf Pods Podfile.lock
    pod install --repo-update
  displayName: 'Pods 재설치'

# 6. iOS 빌드 및 IPA 생성
- script: |
    mkdir -p $(BUILD_DIR)
    
    xcodebuild -workspace ios/App/App.xcworkspace \
               -scheme App \
               -archivePath $(BUILD_DIR)/App.xcarchive \
               CODE_SIGN_STYLE="Manual" \
               PROVISIONING_PROFILE_SPECIFIER="$(PROVISIONING_PROFILE_NAME)" \
               CODE_SIGN_IDENTITY="Apple Distribution" \
               DEVELOPMENT_TEAM="$(TEAM_ID)"\
               archive

    xcodebuild -exportArchive \
               -archivePath $(BUILD_DIR)/App.xcarchive \
               -exportOptionsPlist ExportOptions.plist \
               -exportPath $(BUILD_DIR)/ipa
  displayName: '아카이브 및 IPA 생성'

- script: |
    # Grant execution permission to generate_hash script
    HASH_SCRIPT_PATH="$(Build.SourcesDirectory)/ios/App/AppSealingSDK/Tools/generate_hash"

    echo "Granting execution permission to generate_hash..."
    chmod +x "$HASH_SCRIPT_PATH"

    echo "Running generate_hash with IPA... $IPA_PATH"
    "$HASH_SCRIPT_PATH" "$(IPA_PATH)"
  displayName: 'Run generate_hash on IPA'

# 7. TestFlight 업로드 (App-Specific Password 사용)
- script: |
    xcrun altool --upload-app \
                 --type ios \
                 --file "$(IPA_PATH)" \
                 --username "puzznic@inka.co.kr" \
                 --password "qbrz-hmfz-robj-eohm" \
                 --output-format xml
  displayName: 'TestFlight 업로드'