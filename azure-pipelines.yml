# trigger:
# - main

# pool:
#   name: APPSEALING

# parameters:
# - name: APPLE_ID
#   type: string
#   default: 'puzznic@inka.co.kr'
# - name: APP_SPECIFIC_PASSWORD
#   type: string
#   default: 'qbrz-hmfz-robj-eohm'
# - name: TEAM_ID
#   type: string
#   default: '22X77ENQ2H'
# - name: PROVISIONING_PROFILE_NAME
#   type: string
#   default: 'AppSealing Wildcard Distribution Profile'

# steps:
#   - script: |
#       # Define paths for provisioning profile and keychain setup
#       P12_CERT_PATH="$(Build.SourcesDirectory)/ios/App/distribution.p12"
#       PROVISIONING_PROFILE_PATH="$(Build.SourcesDirectory)/ios/App/profile.mobileprovision"
#       KEYCHAIN_PATH="$HOME/Library/Keychains/temp-keychain.keychain-db"
#       KEYCHAIN_PASSWORD="temp123"

#       # Create a temporary keychain for code signing
#       if security list-keychains | grep -q "temp-keychain.keychain-db"; then
#           echo "Deleting existing temporary keychain..."
#           security delete-keychain "$KEYCHAIN_PATH"
#       fi

#       echo "Creating temporary keychain..."
#       security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

#       echo "Setting temporary keychain as default..."
#       security list-keychains -d user -s "$KEYCHAIN_PATH"
#       security default-keychain -s "$KEYCHAIN_PATH"
#       security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
#       security set-keychain-settings -lut 3600 "$KEYCHAIN_PATH"

#       echo "Importing distribution certificate (PKCS#12) into temporary keychain..."
#       security import "$P12_CERT_PATH" -k "$KEYCHAIN_PATH" -P "123456" -T /usr/bin/codesign
#       security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
#     displayName: 'Setup Temporary Keychain and Install Certificate'

#   - task: UseNode@1
#     inputs:
#       version: '20.x'
#     displayName: 'Install Node.js 20'

#   - script: |
#       export PATH="$PATH:/usr/local/bin"
#       echo "Node.js: $(node -v)"
#       echo "npm: $(npm -v)"
#     displayName: 'Verify Node.js'

#   - script: |
#       echo "Install Ionic CLI..."
#       npm install -g @ionic/cli
#       npm ci
#     displayName: 'Install Dependencies'

#   - script: |
#       echo "Install CocoaPods without sudo..."
#       export GEM_HOME="$HOME/.gem"
#       export PATH="$GEM_HOME/bin:$PATH"
#       gem install cocoapods --user-install
#       pod --version
#     displayName: 'Install CocoaPods'

#   - script: |
#       chmod -R 755 ios/App
#     displayName: 'Fix iOS Directory Permissions'

#   - script: |
#       echo "Starting Capacitor iOS Sync..."
      
#       # 실행 결과를 로그 파일에 저장
#       LOG_FILE="capacitor_sync_ios.log"
#       ionic cap sync ios --force > $LOG_FILE 2>&1 || {
#         echo "Capacitor sync failed. Analyzing logs..."
        
#         # Podfile 관련 오류만 필터링
#         echo "=== Podfile Errors ==="
#         grep -i "podfile" $LOG_FILE || echo "No Podfile errors found."
        
#         # ENOENT (파일 없음) 관련 오류만 필터링
#         echo "=== ENOENT Errors ==="
#         grep -i "enoent" $LOG_FILE || echo "No ENOENT errors found."
        
#         # 전체 로그 경로 출력
#         echo "Full logs saved to: $LOG_FILE"
        
#         exit 1
#       }
      
#       echo "Capacitor iOS Sync completed successfully."
#     displayName: 'Sync iOS Platform with Filtered Logs'

#   - script: |
#       cd ios/App
#       pod install --repo-update
#     displayName: 'Install Pods'
    
#   - script: |
#       IOS_PATH="ios/App"
#       if [ -d "$IOS_PATH" ]; then
#           APP_NAME=$(ls "$IOS_PATH" | grep ".xcodeproj" | sed 's/.xcodeproj//')
#           if [ -z "$APP_NAME" ]; then
#               echo "##vso[task.logissue type=error] Xcode project not found in iOS directory"
#               exit 1
#           fi
#           echo "Detected app name: $APP_NAME"
#       else
#           echo "##vso[task.logissue type=error] iOS directory not found"
#           exit 1
#       fi
#       echo "##vso[task.setvariable variable=APP_NAME]$APP_NAME"
#     displayName: 'Detect App Name'

#   - script: |
#       echo "Extracting Bundle ID from pbxproj file..."
      
#       PBXPROJ_PATH="ios/App/App.xcodeproj/project.pbxproj"
      
#       if [ -f "$PBXPROJ_PATH" ]; then
#           BUNDLE_ID=$(grep -A1 'PRODUCT_BUNDLE_IDENTIFIER' "$PBXPROJ_PATH" | grep -oE 'com\.[a-zA-Z0-9._-]+' | head -n 1)
          
#           if [ -z "$BUNDLE_ID" ]; then
#               echo "##vso[task.logissue type=error] Failed to extract Bundle ID from pbxproj file!"
#               exit 1
#           fi
          
#           echo "Extracted BUNDLE_ID: $BUNDLE_ID"
#           echo "##vso[task.setvariable variable=BUNDLE_ID]$BUNDLE_ID"
#       else
#           echo "##vso[task.logissue type=error] pbxproj file not found at $PBXPROJ_PATH!"
#           exit 1
#       fi
#     displayName: 'Extract Bundle ID from pbxproj File'

#   - script: |
#       PBXPROJ_PATH="ios/App/App.xcodeproj/project.pbxproj"
      
#       if [ ! -f "$PBXPROJ_PATH" ]; then
#         echo "##vso[task.logissue type=error] pbxproj file not found!"
#         exit 1
#       fi
      
#       # Remove provisioning profile settings from Pods targets
#       sed -i '' '/PROVISIONING_PROFILE_SPECIFIER/d' "$PBXPROJ_PATH"

#       cd ios/App
#       EXPORT_DIR="$(Build.ArtifactStagingDirectory)"
#       ARCHIVE_PATH="$EXPORT_DIR/${APP_NAME}.xcarchive"

#       echo "Archiving iOS project..."
#       xcodebuild clean archive \
#         -workspace "${APP_NAME}.xcworkspace" \
#         -scheme "${APP_NAME}" \
#         -sdk iphoneos \
#         -configuration Release \
#         CODE_SIGN_IDENTITY="Apple Distribution" \
#         CODE_SIGN_STYLE="Manual" \
#         DEVELOPMENT_TEAM="${{ parameters.TEAM_ID }}" \
#         PROVISIONING_PROFILE_SPECIFIER="${{ parameters.PROVISIONING_PROFILE_NAME }}" \
#         -archivePath "$ARCHIVE_PATH"
#     displayName: 'Archive iOS App'

#   - script: |
#       EXPORT_DIR="$(Build.ArtifactStagingDirectory)"
      
#       cat << EOF > "$EXPORT_DIR/ExportOptions.plist"
#       <?xml version="1.0" encoding="UTF-8"?>
#       <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
#       <plist version="1.0">
#         <dict>
#             <key>method</key>
#             <string>app-store-connect</string>
#             <key>teamID</key>
#             <string>${{ parameters.TEAM_ID }}</string>
#             <key>provisioningProfiles</key>
#             <dict>
#                 <key>$BUNDLE_ID</key>
#                 <string>${{ parameters.PROVISIONING_PROFILE_NAME }}</string>
#             </dict>
#         </dict>
#       </plist>
#       EOF
#       echo "Generated ExportOptions.plist:"
#       cat "$EXPORT_DIR/ExportOptions.plist"
#     displayName: 'Generate Export Options'

#   - script: |
#       EXPORT_DIR="$(Build.ArtifactStagingDirectory)"
#       xcodebuild -exportArchive \
#         -archivePath "$EXPORT_DIR/${APP_NAME}.xcarchive" \
#         -exportOptionsPlist "$EXPORT_DIR/ExportOptions.plist" \
#         -exportPath "$EXPORT_DIR"
#     displayName: 'Export IPA'

#   - script: |
#       # Grant execution permission to generate_hash script
#       HASH_SCRIPT_PATH="$(Build.SourcesDirectory)/ios/App/AppSealingSDK/Tools/generate_hash"
#       IPA_PATH=$(find "$(Build.ArtifactStagingDirectory)" -type f -name "*.ipa" | head -n 1)

#       echo "Granting execution permission to generate_hash..."
#       chmod +x "$HASH_SCRIPT_PATH"

#       echo "Running generate_hash with IPA... $IPA_PATH"
#       "$HASH_SCRIPT_PATH" "$IPA_PATH"
#     displayName: 'Run generate_hash on IPA'

#   - script: |
#       IPA_PATH=$(find "$(Build.ArtifactStagingDirectory)" -type f -name "*.ipa" | head -n 1)
#       if [ ! -f "$IPA_PATH" ]; then
#           echo "##vso[task.logissue type=error] IPA file not found!"
#           exit 1
#       fi
#       xcrun altool --upload-app \
#         --file "$IPA_PATH" \
#         --type ios \
#         --username "${{ parameters.APPLE_ID }}" \
#         --password "${{ parameters.APP_SPECIFIC_PASSWORD }}"
#     displayName: 'Upload to TestFlight'

#   - script: |
#       TEMP_KEYCHAIN_PATH="$HOME/Library/Keychains/temp-keychain.keychain-db"
#       [ -f "$TEMP_KEYCHAIN_PATH" ] && security delete-keychain "$TEMP_KEYCHAIN_PATH"
#       rm -rf platforms/ios/build
#     displayName: 'Cleanup'

trigger:
- main

variables:
  CERT_PASSWORD: 123456
  TEAM_ID: 22X77ENQ2H
  APPLE_ID: puzznic@inka.co.kr
  APP_SPECIFIC_PASSWORD: qbrz-hmfz-robj-eohm

pool:
  name: APPSEALING

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '18.x'    # Node.js LTS 버전

- script: |
    npm install -g @ionic/cli
    npm install -g @capacitor/cli
  displayName: 'Install Ionic & Capacitor'

- task: DownloadSecureFile@1
  name: distributionCert
  inputs:
    secureFile: "$(Build.SourcesDirectory)/ios/App/distribution.p12"  # Azure Secure Files에 업로드된 인증서

- task: DownloadSecureFile@1
  name: provisioningProfile
  inputs:
    secureFile: "$(Build.SourcesDirectory)ios/App/profile.provision" # Azure Secure Files에 업로드된 프로파일

- script: |
    # Bundle ID & App Name 동적 추출 (capacitor.config.json)
    APP_ID=$(jq -r '.appId' capacitor.config.json)
    APP_NAME=$(jq -r '.appName' capacitor.config.json)
    echo "##vso[task.setvariable variable=APP_ID]$APP_ID"
    echo "##vso[task.setvariable variable=APP_NAME]$APP_NAME"
  displayName: 'Extract Bundle ID & App Name'

- script: |
    # 인증서 및 프로파일 설정
    security create-keychain -p azure azure.keychain
    security import $(distributionCert.secureFilePath) -P "$(CERT_PASSWORD)" -k ~/Library/Keychains/azure.keychain -T /usr/bin/codesign
    security list-keychains -s ~/Library/Keychains/azure.keychain
    security default-keychain -s ~/Library/Keychains/azure.keychain
    security unlock-keychain -p azure ~/Library/Keychains/azure.keychain

    # 프로비저닝 프로파일 UUID 추출
    PROVISION_UUID=$(grep UUID -A1 -a $(provisioningProfile.secureFilePath) | grep -io "[-A-F0-9]\{36\}")
    mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
    cp $(provisioningProfile.secureFilePath) ~/Library/MobileDevice/Provisioning\ Profiles/$PROVISION_UUID.mobileprovision
  displayName: 'Setup Certificates & Profiles'

- script: |
    # exportOptions.plist 생성
    cat <<EOF > exportOptions.plist
    <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
    <plist version="1.0">
    <dict>
        <key>method</key>
        <string>app-store</string>
        <key>teamID</key>
        <string>$(TEAM_ID)</string>
        <key>provisioningProfiles</key>
        <dict>
            <key>$(APP_ID)</key>
            <string>$PROVISION_UUID</string>
        </dict>
    </dict>
    </plist>
    EOF
  displayName: 'Generate exportOptions.plist'

- script: |
    # Ionic 프로젝트 빌드
    ionic build --prod
    npx cap add ios
    cd ios/App
    pod install --repo-update
    cd ../..
  displayName: 'Build Ionic Project'

- script: |
    # Xcode 아카이브 및 IPA 생성
    xcodebuild -workspace ios/App/App.xcworkspace \
               -scheme App \
               -archivePath build/App.xcarchive \
               archive

    xcodebuild -exportArchive \
               -archivePath build/App.xcarchive \
               -exportPath build/ \
               -exportOptionsPlist exportOptions.plist
  displayName: 'Create IPA'

- script: |
    # TestFlight 업로드
    xcrun altool --upload-app \
                 -f "build/$(APP_NAME).ipa" \
                 -t ios \
                 -u "$(APPLE_ID)" \
                 -p "$(APP_SPECIFIC_PASSWORD)"
  displayName: 'Upload to TestFlight'
