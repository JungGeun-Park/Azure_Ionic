trigger:
- main

pool:
  name: APPSEALING

parameters:
- name: APPLE_ID
  type: string
  default: 'puzznic@inka.co.kr'
- name: APP_SPECIFIC_PASSWORD
  type: string
  default: 'qbrz-hmfz-robj-eohm'
- name: TEAM_ID
  type: string
  default: '22X77ENQ2H'
- name: PROVISIONING_PROFILE_NAME
  type: string
  default: 'AppSealing Wildcard Distribution Profile'

steps:
  - script: |
      # Define paths for provisioning profile and keychain setup
      P12_CERT_PATH="$(Build.SourcesDirectory)/ios/App/distribution.p12"
      PROVISIONING_PROFILE_PATH="$(Build.SourcesDirectory)/ios/App/profile.mobileprovision"
      KEYCHAIN_PATH="$HOME/Library/Keychains/temp-keychain.keychain-db"
      KEYCHAIN_PASSWORD="temp123"

      # Create a temporary keychain for code signing
      if security list-keychains | grep -q "temp-keychain.keychain-db"; then
          echo "Deleting existing temporary keychain..."
          security delete-keychain "$KEYCHAIN_PATH"
      fi

      echo "Creating temporary keychain..."
      security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

      echo "Setting temporary keychain as default..."
      security list-keychains -d user -s "$KEYCHAIN_PATH"
      security default-keychain -s "$KEYCHAIN_PATH"
      security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
      security set-keychain-settings -lut 3600 "$KEYCHAIN_PATH"

      echo "Importing distribution certificate (PKCS#12) into temporary keychain..."
      security import "$P12_CERT_PATH" -k "$KEYCHAIN_PATH" -P "123456" -T /usr/bin/codesign
      security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
    displayName: 'Setup Temporary Keychain and Install Certificate'

  - script: |
        echo "iOS 플랫폼 강제 재생성..."
        rm -rf ios/App
        ionic cap add ios
        ionic cap sync ios --force

        # Podfile 존재 확인
        if [ ! -f "ios/App/Podfile" ]; then
          echo "##vso[task.logissue type=error] Podfile not generated!"
          exit 1
        fi

        echo "Podfile 생성 확인 완료."
    displayName: 'Force iOS Platform Regeneration'

  - script: |
<<<<<<< HEAD
      export PATH="$PATH:/usr/local/bin"
      echo "Node.js 버전: $(node -v)"
      echo "npm 버전: $(npm -v)"
    displayName: 'Node.js 확인'

  - script: |
      echo "iOS 플랫폼 강제 재생성..."
      rm -rf ios/App
      ionic cap add ios
      ionic cap sync ios --force

      # Podfile 존재 확인
      if [ ! -f "ios/App/Podfile" ]; then
        echo "##vso[task.logissue type=error] Podfile not generated!"
        exit 1
      fi

      echo "Podfile 생성 확인 완료."
    displayName: 'Force iOS Platform Regeneration'

  - script: |
      echo "CocoaPods 설치 및 의존성 업데이트..."
      cd ios/App
      pod install

      # CocoaPods 성공 여부 확인
      if [ $? -ne 0 ]; then
        echo "##vso[task.logissue type=error] CocoaPods installation failed!"
        exit 1
      fi

=======
      echo "CocoaPods 설치 및 의존성 업데이트..."
      cd ios/App
      pod install

      # CocoaPods 성공 여부 확인
      if [ $? -ne 0 ]; then
        echo "##vso[task.logissue type=error] CocoaPods installation failed!"
        exit 1
      fi

>>>>>>> 233c0ac547f2d6a9f7cb9d2fe3ebc9d911c2ce77
      echo "CocoaPods 설치 완료."
    displayName: 'Install CocoaPods Dependencies'

  - script: |
      IOS_PATH="ios/App"
      if [ -d "$IOS_PATH" ]; then
          APP_NAME=$(ls "$IOS_PATH" | grep ".xcodeproj" | sed 's/.xcodeproj//')
          if [ -z "$APP_NAME" ]; then
              echo "##vso[task.logissue type=error] Xcode project not found in iOS directory"
              exit 1
          fi
          echo "Detected app name: $APP_NAME"
      else
          echo "##vso[task.logissue type=error] iOS directory not found"
          exit 1
      fi
      echo "##vso[task.setvariable variable=APP_NAME]$APP_NAME"
    displayName: 'Detect App Name'

  - script: |
      # Capacitor 설정 파일 확인 (TS 우선, 없으면 JSON)
      CAPACITOR_CONFIG_TS="capacitor.config.ts"
      CAPACITOR_CONFIG_JSON="capacitor.config.json"
      
      if [ -f "$CAPACITOR_CONFIG_TS" ]; then
          echo "Using capacitor.config.ts"
          BUNDLE_ID=$(grep -E "appId\s*:" "$CAPACITOR_CONFIG_TS" | awk -F"'" '{print $2}')
      elif [ -f "$CAPACITOR_CONFIG_JSON" ]; then
          echo "Using capacitor.config.json"
          BUNDLE_ID=$(grep -E '"appId"\s*:' "$CAPACITOR_CONFIG_JSON" | awk -F'"' '{print $4}')
      else
          echo "##vso[task.logissue type=error] capacitor.config.ts/json not found!"
          exit 1
      fi

      # 최종 검증
      if [ -z "$BUNDLE_ID" ]; then
          echo "##vso[task.logissue type=error] appId not found!"
          exit 1
      fi

      echo "Extracted BUNDLE_ID: $BUNDLE_ID"
      echo "##vso[task.setvariable variable=BUNDLE_ID]$BUNDLE_ID"
    displayName: 'Extract Bundle ID from Capacitor Config'
<<<<<<< HEAD
    
=======
  
>>>>>>> 233c0ac547f2d6a9f7cb9d2fe3ebc9d911c2ce77
  - script: |
      cd ios/App
      EXPORT_DIR="$(Build.ArtifactStagingDirectory)"
      ARCHIVE_PATH="$EXPORT_DIR/${APP_NAME}.xcarchive"

      echo "Archiving iOS project..."
      xcodebuild clean archive \
        -workspace "${APP_NAME}.xcworkspace" \
        -scheme "${APP_NAME}" \
        -sdk iphoneos \
        -configuration Release \
        CODE_SIGN_IDENTITY="Apple Distribution" \
        CODE_SIGN_STYLE="Manual" \
        DEVELOPMENT_TEAM="${{ parameters.TEAM_ID }}" \
        PROVISIONING_PROFILE_SPECIFIER="${{ parameters.PROVISIONING_PROFILE_NAME }}" \
        -archivePath "$ARCHIVE_PATH"
    displayName: 'Archive iOS App'

  - script: |
      EXPORT_DIR="$(Build.ArtifactStagingDirectory)"
      
      cat << EOF > "$EXPORT_DIR/ExportOptions.plist"
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
      <plist version="1.0">
        <dict>
            <key>method</key>
            <string>app-store-connect</string>
            <key>teamID</key>
            <string>${{ parameters.TEAM_ID }}</string>
            <key>provisioningProfiles</key>
            <dict>
                <key>$BUNDLE_ID</key>
                <string>${{ parameters.PROVISIONING_PROFILE_NAME }}</string>
            </dict>
        </dict>
      </plist>
      EOF
      echo "Generated ExportOptions.plist:"
      cat "$EXPORT_DIR/ExportOptions.plist"
    displayName: 'Generate Export Options'

  - script: |
      EXPORT_DIR="$(Build.ArtifactStagingDirectory)"
      xcodebuild -exportArchive \
        -archivePath "$EXPORT_DIR/${APP_NAME}.xcarchive" \
        -exportOptionsPlist "$EXPORT_DIR/ExportOptions.plist" \
        -exportPath "$EXPORT_DIR"
    displayName: 'Export IPA'

  - script: |
      # Grant execution permission to generate_hash script
      HASH_SCRIPT_PATH="$(Build.SourcesDirectory)/ios/App/AppSealingSDK/Tools/generate_hash"
      IPA_PATH=$(find "$(Build.ArtifactStagingDirectory)" -type f -name "*.ipa" | head -n 1)

      echo "Granting execution permission to generate_hash..."
      chmod +x "$HASH_SCRIPT_PATH"

      echo "Running generate_hash with IPA... $IPA_PATH"
      "$HASH_SCRIPT_PATH" "$IPA_PATH"
    displayName: 'Run generate_hash on IPA'

  - script: |
      IPA_PATH=$(find "$(Build.ArtifactStagingDirectory)" -type f -name "*.ipa" | head -n 1)
      if [ ! -f "$IPA_PATH" ]; then
          echo "##vso[task.logissue type=error] IPA file not found!"
          exit 1
      fi
      xcrun altool --upload-app \
        --file "$IPA_PATH" \
        --type ios \
        --username "${{ parameters.APPLE_ID }}" \
        --password "${{ parameters.APP_SPECIFIC_PASSWORD }}"
    displayName: 'Upload to TestFlight'

  - script: |
      TEMP_KEYCHAIN_PATH="$HOME/Library/Keychains/temp-keychain.keychain-db"
      [ -f "$TEMP_KEYCHAIN_PATH" ] && security delete-keychain "$TEMP_KEYCHAIN_PATH"
      rm -rf platforms/ios/build
    displayName: 'Cleanup'
